package com.musinsa.stat.sales.dto

import java.sql.ResultSet

/**
 * 일별매출통계
 */
data class Daily(
    /**
     * 8자리 일자
     * ex) 20230502
     */
    val date: String?,
    override val isGrouping: Boolean,
    override val sellQuantity: Long,
    override val sellAmount: Long,
    override val refundQuantity: Long,
    override val refundAmount: Long,
    override val exchangeQuantity: Long,
    override val exchangeAmount: Long,
    override val tradeQuantity: Long,
    override val tradeAmount: Long,
    override val memberDiscounts: Long,
    override val affiliateDiscounts: Long,
    override val otherDiscounts: Long,
    override val couponDiscounts: Long,
    override val partnerCouponDiscounts: Long,
    override val pointDiscounts: Long,
    override val prePointDiscounts: Long,
    override val cartDiscounts: Long,
    override val groupDiscounts: Long,
    override val totalDiscounts: Long,
    override val discountRate: Double,
    override val paymentFees: Long,
    override val paymentAmount: Long,
    override val sales: Long,
    override val originalPrice: Long,
    override val profit: Long,
    override val profitMargin: Double,
    override val purchasesTradeAmount: Long,
    override val purchasesDiscounts: Long,
    override val purchasesPaymentFees: Long,
    override val purchasesPaymentAmount: Long,
    override val purchasesOriginalPrice: Long,
    override val purchasesProfit: Long,
    override val purchasesProfitMargin: Double,
    override val purchasesRatio: Double,
    override val partnerTradeAmount: Long,
    override val partnerDiscounts: Long,
    override val partnerPaymentFees: Long,
    override val partnerPaymentAmount: Long,
    override val partnerSellFees: Long,
    override val partnerFees: Long,
    override val partnerSellGrants: Long,
    override val partnerProfitMargin: Double,
    override val salesExcludedVAT: Long,
    override val originalPriceExcludedVAT: Long,
    override val profitExcludedVAT: Long,
    override val profitMarginExcludedVAT: Double
) : SalesStatistics(
    isGrouping,
    sellQuantity,
    sellAmount,
    refundQuantity,
    refundAmount,
    exchangeQuantity,
    exchangeAmount,
    tradeQuantity,
    tradeAmount,
    memberDiscounts,
    affiliateDiscounts,
    otherDiscounts,
    couponDiscounts,
    partnerCouponDiscounts,
    pointDiscounts,
    prePointDiscounts,
    cartDiscounts,
    groupDiscounts,
    totalDiscounts,
    discountRate,
    paymentFees,
    paymentAmount,
    sales,
    originalPrice,
    profit,
    profitMargin,
    purchasesTradeAmount,
    purchasesDiscounts,
    purchasesPaymentFees,
    purchasesPaymentAmount,
    purchasesOriginalPrice,
    purchasesProfit,
    purchasesProfitMargin,
    purchasesRatio,
    partnerTradeAmount,
    partnerDiscounts,
    partnerPaymentFees,
    partnerPaymentAmount,
    partnerSellFees,
    partnerFees,
    partnerSellGrants,
    partnerProfitMargin,
    salesExcludedVAT,
    originalPriceExcludedVAT,
    profitExcludedVAT,
    profitMarginExcludedVAT
) {
    constructor(rs: ResultSet, date: String) : this(
        date = date,
        isGrouping = rs.getBoolean("집계"),
        sellQuantity = rs.getLong("판매수량"),
        sellAmount = rs.getLong("판매금액"),
        refundQuantity = rs.getLong("환불수량"),
        refundAmount = rs.getLong("환불금액"),
        exchangeQuantity = rs.getLong("교환수량"),
        exchangeAmount = rs.getLong("교환금액"),
        tradeQuantity = rs.getLong("거래수량"),
        tradeAmount = rs.getLong("거래금액"),
        memberDiscounts = rs.getLong("회원할인"),
        affiliateDiscounts = rs.getLong("제휴할인"),
        otherDiscounts = rs.getLong("기타할인"),
        couponDiscounts = rs.getLong("쿠폰(무신사)할인"),
        partnerCouponDiscounts = rs.getLong("쿠폰(업체)할인"),
        pointDiscounts = rs.getLong("적립금할인"),
        prePointDiscounts = rs.getLong("선적립금할인"),
        cartDiscounts = rs.getLong("장바구니할인"),
        groupDiscounts = rs.getLong("그룹할인"),
        totalDiscounts = rs.getLong("소계"),
        discountRate = rs.getDouble("할인율"),
        paymentFees = rs.getLong("결제수수료"),
        paymentAmount = rs.getLong("결제금액"),
        sales = rs.getLong("매출"),
        originalPrice = rs.getLong("원가"),
        profit = rs.getLong("이익"),
        profitMargin = rs.getDouble("이익률"),
        purchasesTradeAmount = rs.getLong("매입상품_거래금액"),
        purchasesDiscounts = rs.getLong("매입상품_할인"),
        purchasesPaymentFees = rs.getLong("매입상품_결제수수료"),
        purchasesPaymentAmount = rs.getLong("매입상품_결제금액"),
        purchasesOriginalPrice = rs.getLong("매입상품_원가"),
        purchasesProfit = rs.getLong("매입상품_이익"),
        purchasesProfitMargin = rs.getDouble("매입상품_이익율"),
        purchasesRatio = rs.getDouble("매입상품_비중"),
        partnerTradeAmount = rs.getLong("입점상품_거래금액"),
        partnerDiscounts = rs.getLong("입점상품_할인"),
        partnerPaymentFees = rs.getLong("입점상품_결제수수료"),
        partnerPaymentAmount = rs.getLong("입점상품_결제금액"),
        partnerSellFees = rs.getLong("입점상품_판매수수료"),
        partnerFees = rs.getLong("입점상품_수수료"),
        partnerSellGrants = rs.getLong("입점상품_판매지원금"),
        partnerProfitMargin = rs.getDouble("입점상품_이익률"),
        salesExcludedVAT = rs.getLong("매출(VAT별도)"),
        originalPriceExcludedVAT = rs.getLong("원가(VAT별도)"),
        profitExcludedVAT = rs.getLong("이익(VAT별도)"),
        profitMarginExcludedVAT = rs.getDouble("이익률(VAT별도)")
    )
}
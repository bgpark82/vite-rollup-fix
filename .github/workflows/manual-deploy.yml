name: manual deploy
run-name: Deploy ${{ inputs.service }} on ${{ github.ref_name }} branch by @${{ github.actor }}
on:
  workflow_dispatch:
    inputs:
      service:
        description: '서비스를 선택해주세요'
        required: true
        default: 'harrods'
        type: choice
        options:
          - harrods
          - harrods-client
          - stat

env:
  AWS_REGION: ap-northeast-2
  S3_DEPLOY_BASE_PATH: s3://musinsa-server-build/dataplatform

jobs:
  setup_environment:
    name: setup environment
    runs-on: ubuntu-22.04
    outputs:
      service: ${{ steps.vars.outputs.service }}
      profile: ${{ steps.vars.outputs.profile }}
      build_file: ${{ steps.vars.outputs.build_file }}
      build_file_path_s3: ${{ steps.vars.outputs.build_file_path_s3 }}
      build_file_path_local: ${{ steps.vars.outputs.build_file_path_local }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set variables
        id: vars
        run: |
          service="${{ inputs.service }}"
          profile="${{ github.ref_name }}"
          build_file="${service}.tar"

          echo "service=$service" >> $GITHUB_OUTPUT
          echo "profile=$profile" >> $GITHUB_OUTPUT
          echo "build_file=$service.tar" >> $GITHUB_OUTPUT
          echo "build_file_path_local=$service/build/libs" >> $GITHUB_OUTPUT
          echo "build_file_path_s3=${{ env.S3_DEPLOY_BASE_PATH }}/$service/$profile" >> $GITHUB_OUTPUT

      - name: Print variables
        run: |
          echo service: ${{ steps.vars.outputs.service }}
          echo profile: ${{ steps.vars.outputs.profile }}
          echo build_file: ${{ steps.vars.outputs.build_file }}
          echo build_file_path_s3: ${{ steps.vars.outputs.build_file_path_s3 }}
          echo build_file_path_local: ${{ steps.vars.outputs.build_file_path_local }}

      - name: Check variables
        run: |
          service="${{ steps.vars.outputs.service }}"
          profile="${{ steps.vars.outputs.profile }}"

          echo "check if service module exist"
          if [ -d "$service" ]; then
            echo "Service $service exist"
          else
            echo "Unsupported service: $service"
            exit 1
          fi

          echo "check if branch is invalid"
          if [ "$profile" == "dev" ] || [ "$profile" == "alpha" ] || [ "$profile" == "prod" ]; then
            echo "Service deploy on $profile branch"
          else
            echo "Unsupported service: $profile"
            exit 1
          fi

  build_and_deploy:
    name: build and deploy service
    runs-on: ubuntu-22.04
    needs: [ setup_environment ]
    env:
      service: ${{ needs.setup_environment.outputs.service }}
      profile: ${{ needs.setup_environment.outputs.profile }}
      build_file: ${{ needs.setup_environment.outputs.build_file }}
      build_file_path_s3: ${{ needs.setup_environment.outputs.build_file_path_s3 }}
      build_file_path_local: ${{ needs.setup_environment.outputs.build_file_path_local }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Install JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17
          cache: 'gradle'

      - name: Install Kotlin 1.7
        run: |
          sudo snap install --classic kotlin --channel=1.7

      - name: Clean
        run: ./gradlew :${{ env.service }}:clean

      - name: Build
        run: ./gradlew :${{ env.service }}:build -Dbuild_stage=${{ env.profile }}

      - name: Compress tar
        run: tar -cvf ${{ env.build_file }} -C ./${{ env.build_file_path_local }} .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Upload to S3
        run: aws s3 cp --region ${{ env.AWS_REGION }} ${{ env.build_file }} ${{ env.build_file_path_s3 }}/${{ env.build_file }}

  post:
    name: post action
    runs-on: ubuntu-22.04
    needs: [ setup_environment, build_and_deploy ]
    env:
      service: ${{ needs.setup_environment.outputs.service }}
      profile: ${{ needs.setup_environment.outputs.profile }}
      build_file: ${{ needs.setup_environment.outputs.build_file }}
      build_file_path_s3: ${{ needs.setup_environment.outputs.build_file_path_s3 }}
    steps:
      - name: Send result to Slack
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: ${{ env.service }}_build
          author_name: ${{ env.service }}_build_bot
          fields: repo,message,commit,author,eventName,ref,workflow
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.STAT_SLACK_WEBHOOK_URL }}

      - name: Send custom result to Slack
        uses: slackapi/slack-github-action@v1.24.0
        if: success()
        with:
          payload: |
            {
              "blocks": [
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": "✅ ${{ env.service }} 빌드 파일이 S3로 전송되었습니다"
                  }
                },
            	{
                  "type": "section",
                  "fields": [
                    {
                      "type": "mrkdwn",
                      "text": "*Service:*\n ${{ env.service }}"
                    },
                    {
                      "type": "mrkdwn",
                      "text": "*Branch:*\n ${{ env.profile }}"
                    }
                  ]
                },
                {
                    "type": "section",
                    "text": {
                      "type": "mrkdwn",
                      "text": "*S3 Path:*\n ${{ env.build_file_path_s3 }}/${{ env.build_file }}"
                    }
                }
              ]
            }
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.STAT_SLACK_WEBHOOK_URL }}
          SLACK_WEBHOOK_TYPE: INCOMING_WEBHOOK
